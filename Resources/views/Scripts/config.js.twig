/**
 * Created by killer on 19/01/16.
 */

angular.module('app')
        .constant('MODULES',
                [
                    {
                        name: 'app.bundles',
                        files: [
                            '{{ asset('bundles/backend/app/services/dashboard.js')|raw }}',
                            '{{ asset('bundles/backend/app/controllers/configuration/BundlesCtrl.js')|raw }}'
                        ]
                    },
                    {
                        name: 'app.routes',
                        files: [
                            '{{ asset('bundles/backend/app/services/dashboard.js')|raw }}',
                            '{{ asset('bundles/backend/app/controllers/configuration/RoutesCtrl.js')|raw }}'
                        ]
                    },
                    {
                        name: 'app.database',
                        files: [
                            '{{ asset('bundles/backend/app/services/dashboard.js')|raw }}',
                            '{{ asset('bundles/backend/app/controllers/configuration/DatabaseCtrl.js')|raw }}'
                        ]
                    },
                    {
                        name: 'app.commands',
                        files: [
                            '{{ asset('bundles/backend/app/services/dashboard.js')|raw }}',
                            '{{ asset('bundles/backend/app/controllers/configuration/CommandsCtrl.js')|raw }}',
                        ]
                    },
                    {
                        name: 'app.help',
                        files: [
                            '{{ asset('bundles/backend/app/controllers/help/HelpCtrl.js')|raw }}'
                        ]
                    },
                    {
                        name: 'treeControl',
                        files: [
                            '{{ asset('bundles/backend/node_modules/angular-tree-control/angular-tree-control.js')|raw }}',
                            '{{ asset('bundles/backend/node_modules/angular-tree-control/css/tree-control-attribute.css')|raw }}',
                            '{{ asset('bundles/backend/node_modules/angular-tree-control/css/tree-control.css')|raw }}',
                        ]
                    }
                ]
        )
        .config(
                ['$ocLazyLoadProvider', 'MODULES', 'cfpLoadingBarProvider', '$mdThemingProvider', '$httpProvider', '$resourceProvider', 'toastrConfig',
                    function ($ocLazyLoadProvider, MODULES, cfpLoadingBarProvider, $mdThemingProvider, $httpProvider, $resourceProvider, toastrConfig) {

                        cfpLoadingBarProvider.includeSpinner = true;
                        cfpLoadingBarProvider.includeBar = true;
                        cfpLoadingBarProvider.spinnerTemplate =
                                '<div class="backend-loading">' +
                                '<md-progress-circular style="width: 100px; height: 100px;" class="ng-scope" role="progressbar" aria-valuemax="100" aria-valuemin="0" md-mode="indeterminate" md-diameter="100">' +
                                '<div style="transform: translate(-50%, -50%) scale(1);" class="md-scale-wrapper md-mode-indeterminate">' +
                                '<div class="md-spinner-wrapper">' +
                                '<div class="md-inner">' +
                                '<div class="md-gap"></div>' +
                                '<div class="md-left">' +
                                '<div class="md-half-circle"></div>' +
                                '</div>' +
                                '<div class="md-right">' +
                                '<div class="md-half-circle"></div>' +
                                '</div>' +
                                '</div>' +
                                '</div>' +
                                '</div>' +
                                '</md-progress-circular>' +
                                '</div>';

                        $ocLazyLoadProvider.config({
                            debug: true,
                            events: false,
                            modules: MODULES
                        });

                        {#angular.extend(toastrConfig, {#}
                        {#timeOut: 50000#}
                        {#});#}

                        $mdThemingProvider.theme('docs-dark', 'default')
                                .primaryPalette('yellow')
                                .dark();

                        $resourceProvider.defaults.stripTrailingSlashes = false;

                        $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';

                        $httpProvider.defaults.transformRequest = [function (data) {
                            return angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;
                        }];

                        var param = function (obj) {
                            var query = '', name, value, fullSubName, subName, subValue, innerObj, i;

                            for (name in obj) {
                                value = obj[name];

                                if (value instanceof Array) {
                                    for (i = 0; i < value.length; ++i) {
                                        subValue = value[i];
                                        fullSubName = name + '[' + i + ']';
                                        innerObj = {};
                                        innerObj[fullSubName] = subValue;
                                        query += param(innerObj) + '&';
                                    }
                                }
                                else if (value instanceof Object) {
                                    for (subName in value) {
                                        subValue = value[subName];
                                        fullSubName = name + '[' + subName + ']';
                                        innerObj = {};
                                        innerObj[fullSubName] = subValue;
                                        query += param(innerObj) + '&';
                                    }
                                }
                                else if (value !== undefined && value !== null)
                                    query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';
                            }

                            return query.length ? query.substr(0, query.length - 1) : query;
                        };


                    }
                ]
        );