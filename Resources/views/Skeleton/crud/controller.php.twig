{% macro fieldList(field_list) %}
    'fields' => array(
{% for field in field_list.fields %}
            '{{ field }}',
{% endfor %}
        ),
        'associations' => array(
{% for key, association in field_list.associations %}
            '{{ key }}' => array(
                'fields' => array(
{% for field1 in association.fields %}
                    '{{ field1 }}',
{% endfor %}
                ),
                'associations' => array()
            ),
{% endfor %}
        )
{% endmacro %}
<?php

namespace {{ namespace }}\Controller{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Symfony\Component\HttpFoundation\Request;
{% if 'annotation' == format -%}
use Doctrine\ORM\Query;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template; //Debe quitarse
use Symfony\Component\HttpFoundation\Response;
{%- endif %}

use UCI\Boson\BackendBundle\Controller\BackendController;
use {{ namespace }}\Entity\{{ entity }};
{#use {{ namespace }}\Form\{{ entity }}Type;#}
{% endblock use_statements %}

/**
{% block phpdoc_class_header %}
 * {{ entity }} controller.
{% endblock phpdoc_class_header %}
 *
{% block phpdoc_class_annotations %}
{% if 'annotation' == format %}
 * @Route("/{{ route_prefix }}")
{% endif %}
{% endblock phpdoc_class_annotations %}
 */
{% block class_definition %}
class {{ entity_class }}Controller extends BackendController
{% endblock class_definition %}
{
    private $listFields = array(
    {{ _self.fieldList(field_list) }}
    );

    private $searchFields = array(
{% for key,field in search_field %}
{% if key != 'id' %}
        '{{ key }}' => '{{ field.type }}',
{% endif %}
{% endfor %}
    );

    private $newFormFields = array(
{% for field in field_list.fields %}
{% if field != 'id' %}
        '{{ field }}',
{% endif %}
{% endfor %}
    );

    private $editFormFields = array(
{% for field in field_list.fields %}
{% if field != 'id' %}
        '{{ field }}',
{% endif %}
{% endfor %}
    );

    private $defaultMaxResults = array(5, 10, 15);

{% block class_body %}
    {%- include 'BackendBundle:Skeleton:crud/actions/index.php.twig' %}

    {%- include 'BackendBundle:Skeleton:crud/actions/create.php.twig' %}
    {%- include 'BackendBundle:Skeleton:crud/actions/new.php.twig' %}

    {%- include 'BackendBundle:Skeleton:crud/actions/show.php.twig' %}

    {%- include 'BackendBundle:Skeleton:crud/actions/edit.php.twig' %}
    {%- include 'BackendBundle:Skeleton:crud/actions/update.php.twig' %}

    {%- include 'BackendBundle:Skeleton:crud/actions/delete.php.twig' %}

    public function PaginateResults($filter = "", $page = 1, $limit = 5, $order = "id")
    {
        $em = $this->get('doctrine.orm.entity_manager');
        $selectFields = "partial {{ entity }}.{" . implode(', ', $this->listFields['fields']) . "}";
        $selectAssociations = $this->generateSelect($this->listFields['associations'], '{{ entity }}');
        $qb = $em->createQueryBuilder();

        list($limit, $order, $direction) = $this->transformQuery($limit, $order);

        $qb
            ->select($selectFields)
            ->from('{{ bundle }}:{{ entity }}', '{{ entity }}')
            ->orderBy('{{ entity }}.' . $order, $direction)
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit);

        foreach ($selectAssociations['select'] as $selectAssociation) {
            $qb->addSelect($selectAssociation);
        }

        foreach ($selectAssociations['join'] as $index => $selectAssociation) {
            $qb->leftJoin($selectAssociation, $index);
        }

        foreach ($this->searchFields as $index => $searchField) {
            $like = ($searchField !== 'string') ? "CAST({{ entity }}.$index AS TEXT)" : "LOWER({{ entity }}.$index)";
            $qb->orWhere("$like LIKE '%$filter%'");
        }

        $query = $qb->getQuery();
        $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);

        $paginator = new Paginator($query);
        $count = $paginator->count();

        return array(
            'data' => $paginator->getIterator()->getArrayCopy(),
            'count' => $count
        );
    }

    public function transformQuery($limit, $order)
    {
        $limit = (in_array($limit, $this->defaultMaxResults)) ? $limit : $this->defaultMaxResults[0];
        if ($this->startsWith($order, '-')) {
            return array($limit, substr($order, 1), 'DESC');
        } else {
            return array($limit, $order, 'ASC');
        }
    }

    public function startsWith($haystack, $needle)
    {
        // search backwards starting from haystack length characters from the end
        return $needle === "" || strrpos($haystack, $needle, -strlen($haystack)) !== false;
    }

    /**
     * @param array $associations
     * @param $parent
     * @return array
     */
    private function generateSelect(array $associations, $parent)
    {
        $result = array(
            'select' => array(),
            'join' => array()
        );

        foreach ($associations as $index => $association) {
            $select = 'partial ' . $index . '.{' . implode(', ', $association['fields']) . '}';
            $result['select'][] = $select;
            $join = $parent . '.' . $index;
            $result['join'][$index] = $join;

            if (array_key_exists('associations', $association)) {
                $result = array_merge_recursive($result, $this->generateSelect($association['associations'], $index));
            }

        }

        return $result;
    }
{% endblock class_body %}
}
